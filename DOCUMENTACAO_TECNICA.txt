
==================================================================
         DOCUMENTA√á√ÉO T√âCNICA - CONTADOR DE DESCIDAS TIROLESA
==================================================================

VIS√ÉO GERAL
-----------
Sistema desenvolvido em HTML, CSS e JavaScript puro para contagem 
e gerenciamento de descidas de tirolesa. Foca em simplicidade, 
compatibilidade e zero depend√™ncias externas.

ARQUITETURA DO SISTEMA
======================

1. ESTRUTURA DE ARQUIVOS
------------------------
index.html       - Estrutura principal da aplica√ß√£o
styles.css       - Estilos visuais e responsividade  
script.js        - L√≥gica de neg√≥cio e intera√ß√µes
README.md        - Documenta√ß√£o do usu√°rio

2. PADR√ÉO ARQUITETURAL
---------------------
- Event-Driven Architecture: Sistema baseado em eventos DOM
- State Management: Estado centralizado em vari√°veis globais
- Functional Programming: Fun√ß√µes puras sempre que poss√≠vel
- Separation of Concerns: HTML (estrutura), CSS (apresenta√ß√£o), JS (comportamento)

ESTRUTURA DE DADOS
==================

1. MODELO DE DADOS
------------------
Record {
    id: String          // Timestamp √∫nico como identificador
    type: String        // Tipo da cadeirinha: "B", "T0", "T1", "T2"
    timestamp: String   // Data/hora em formato ISO 8601
}

Exemplo:
{
    "id": "1703925456789",
    "type": "B",
    "timestamp": "2023-12-30T14:30:56.789Z"
}

2. ARMAZENAMENTO
----------------
- LocalStorage: Persist√™ncia de dados no navegador
- Chaves utilizadas:
  * 'tirolesa-records': Array de registros de descidas
  * 'operator-name': Nome do operador atual

FUNCIONALIDADES PRINCIPAIS
===========================

1. CONTADOR DE DESCIDAS
------------------------
Fun√ß√£o: addRecord(type)
- Cria novo registro com timestamp √∫nico
- Salva no localStorage
- Atualiza interface em tempo real
- Exibe notifica√ß√£o de confirma√ß√£o

Tipos suportados:
- B: Cadeirinha tipo B (üü¢ Verde)
- T0: Cadeirinha tipo T0 (üîµ Azul)
- T1: Cadeirinha tipo T1 (üü° Amarelo)
- T2: Cadeirinha tipo T2 (üî¥ Vermelho)

2. HIST√ìRICO DETALHADO
----------------------
Fun√ß√£o: updateHistoryDisplay()
- Lista cronol√≥gica de todas as descidas do dia
- Ordena√ß√£o por hor√°rio (mais recente primeiro)
- Informa√ß√µes exibidas: tipo, hor√°rio, n√∫mero sequencial
- Possibilidade de exclus√£o individual

3. RESUMO ESTAT√çSTICO
---------------------
Fun√ß√£o: generateSummaryHTML(records)
- Total geral de descidas
- Breakdown por tipo de cadeirinha
- Primeira e √∫ltima descida do dia
- Gr√°fico de distribui√ß√£o por hora
- Informa√ß√µes do operador

4. NAVEGA√á√ÉO POR TABS
--------------------
Fun√ß√£o: switchTab(tab)
- Tabs dispon√≠veis: counter, history, summary
- Estado ativo mantido em vari√°vel global
- Atualiza√ß√£o din√¢mica de conte√∫do

SISTEMA DE INTERFACE
====================

1. RESPONSIVIDADE
-----------------
Breakpoints CSS:
- Desktop: > 768px (layout completo)
- Tablet: 481px - 768px (layout adaptado)
- Mobile: ‚â§ 480px (layout vertical)

Grid Systems:
- CSS Grid para layouts principais
- Flexbox para alinhamentos
- Auto-fit para adapta√ß√£o de colunas

2. CORES E TEMAS
----------------
Sistema de cores padronizado:
- Prim√°ria: #222222 (textos principais)
- Secund√°ria: #666666 (textos secund√°rios)
- Verde: #10b981 (Cadeirinha B)
- Azul: #3b82f6 (Cadeirinha T0)
- Amarelo: #f59e0b (Cadeirinha T1)
- Vermelho: #ef4444 (Cadeirinha T2)
- Fundo: Gradiente linear azul-verde
- Cards: Branco com sombras sutis

3. ANIMA√á√ïES
------------
- Transi√ß√µes CSS para hover/focus states
- Keyframe animations para modais e notifica√ß√µes
- Transform animations para feedback t√°til
- Fade-in effects para mudan√ßas de tab

GERENCIAMENTO DE EVENTOS
========================

1. EVENT LISTENERS
------------------
- DOMContentLoaded: Inicializa√ß√£o da aplica√ß√£o
- Click Events: Bot√µes de contador, tabs, modais
- Input Events: Campo nome do operador
- Keyboard Events: Atalhos num√©ricos (1-4) e ESC

2. ATALHOS DE TECLADO
--------------------
- 1: Adicionar Cadeirinha B
- 2: Adicionar Cadeirinha T0
- 3: Adicionar Cadeirinha T1
- 4: Adicionar Cadeirinha T2
- ESC: Fechar modal ativo

SISTEMA DE NOTIFICA√á√ïES
=======================

1. NOTIFICA√á√ïES TOAST
---------------------
Fun√ß√£o: showNotification(message)
- Posicionamento: Canto superior direito
- Auto-dismiss: 3 segundos
- Anima√ß√µes: slideInRight / slideOutRight
- Z-index: 1001 (acima de outros elementos)

2. MODAIS DE CONFIRMA√á√ÉO
------------------------
Fun√ß√£o: showConfirmModal(message, callback)
- Overlay semitransparente
- Bot√µes: Cancelar / Confirmar
- Callback execution no confirm
- Escape key para fechar

SISTEMA DE EXPORTA√á√ÉO
=====================

1. SIMULA√á√ÉO DE EXPORT
-----------------------
Fun√ß√£o: exportSummaryAsImage()
- Simula gera√ß√£o de arquivo PNG
- Nome autom√°tico: tirolesa-resumo-[data]-[operador].png
- Loading state no bot√£o durante processamento
- Valida√ß√£o de dados antes da exporta√ß√£o

2. INTEGRA√á√ÉO FUTURA
--------------------
Para implementa√ß√£o real da exporta√ß√£o:
- html2canvas: Captura de screenshots do DOM
- Canvas API: Gera√ß√£o manual de imagens
- File API: Download direto pelo navegador

COMPATIBILIDADE
===============

1. NAVEGADORES SUPORTADOS
--------------------------
- Chrome/Edge: 60+
- Firefox: 55+
- Safari: 12+
- iOS Safari: 12+
- Android Chrome: 60+

2. FEATURES UTILIZADAS
----------------------
JavaScript:
- ECMAScript 5 (m√°xima compatibilidade)
- DOM API (querySelector, addEventListener)
- LocalStorage API
- Date API com Intl support

CSS:
- CSS Grid (IE 11+)
- Flexbox (IE 11+)
- CSS Variables (IE n√£o suportado, graceful degradation)
- Media Queries
- Keyframe Animations

PERFORMANCE
===========

1. OTIMIZA√á√ïES IMPLEMENTADAS
----------------------------
- Event delegation onde poss√≠vel
- Debounce em inputs cr√≠ticos
- Lazy loading de dados pesados
- Cache de elementos DOM
- Minimal DOM manipulation

2. M√âTRICAS ESPERADAS
---------------------
- First Paint: < 500ms
- Interactive: < 1s
- Bundle Size: ~50KB total
- Memory Usage: < 10MB
- Battery Impact: Minimal

SEGURAN√áA
=========

1. VALIDA√á√ÉO DE DADOS
---------------------
- Type checking em todas as fun√ß√µes
- Sanitiza√ß√£o de inputs do usu√°rio
- Valida√ß√£o de estruturas de dados
- Error boundaries para exce√ß√µes

2. ARMAZENAMENTO LOCAL
----------------------
- Dados n√£o sens√≠veis apenas
- Valida√ß√£o JSON antes de parse
- Fallback para dados corrompidos
- Limpeza autom√°tica em caso de erro

DEPLOY E HOSPEDAGEM
===================

1. DEPLOY SIMPLES
-----------------
- Arquivos est√°ticos apenas
- Sem build process necess√°rio
- Upload direto para servidor
- Compat√≠vel com qualquer host

2. OP√á√ïES DE HOSPEDAGEM
-----------------------
- GitHub Pages (gratuito)
- Netlify (gratuito)
- Vercel (gratuito)
- Firebase Hosting
- Qualquer servidor Apache/Nginx

3. CONFIGURA√á√ÉO M√çNIMA
----------------------
Requisitos:
- Servidor HTTP b√°sico
- Suporte a arquivos est√°ticos
- HTTPS recomendado
- Sem requisitos de backend

MANUTEN√á√ÉO E DEBUGGING
======================

1. LOGS DE SISTEMA
------------------
- Console.log para fluxo principal
- Console.error para exce√ß√µes
- Tracking de eventos cr√≠ticos
- Estado da aplica√ß√£o logado

2. DEBUGGING TOOLS
------------------
- DevTools do navegador
- LocalStorage inspector
- Network tab para recursos
- Performance profiler

3. TESTES MANUAIS
-----------------
Cen√°rios principais:
- Adicionar descidas de cada tipo
- Navega√ß√£o entre tabs
- Persist√™ncia ap√≥s reload
- Responsividade em diferentes telas
- Limpeza de dados

FUTURAS MELHORIAS
=================

1. FUNCIONALIDADES
------------------
- PWA (Progressive Web App)
- Modo offline completo
- Sincroniza√ß√£o em nuvem
- M√∫ltiplos operadores
- Relat√≥rios avan√ßados

2. T√âCNICAS
-----------
- Service Workers
- IndexedDB para dados grandes
- Web Crypto API para seguran√ßa
- Web Workers para processamento pesado
- WebAssembly para performance cr√≠tica

3. UX/UI
--------
- Temas customiz√°veis
- Modo escuro/claro
- Acessibilidade WCAG 2.1
- Suporte a gestos touch
- Anima√ß√µes avan√ßadas

TROUBLESHOOTING
===============

1. PROBLEMAS COMUNS
-------------------
Q: Dados perdidos ap√≥s reload
A: Verificar se LocalStorage est√° habilitado

Q: Interface n√£o responsiva
A: Verificar suporte a CSS Grid/Flexbox

Q: Exporta√ß√£o n√£o funciona
A: Implementa√ß√£o simulada, necess√°ria integra√ß√£o real

Q: Performance lenta
A: Limpar dados antigos, verificar quantidade de registros

2. LOGS DE ERROR
----------------
Todos os erros s√£o capturados e logados:
- window.onerror para erros globais
- try/catch em opera√ß√µes cr√≠ticas
- Valida√ß√£o de entrada em todas as fun√ß√µes

==================================================================
                        FIM DA DOCUMENTA√á√ÉO
==================================================================

Autor: Sistema Lovable AI
Data: 2024
Vers√£o: 1.0
Licen√ßa: MIT
